---
- name: Setup Vprofile stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variables
      include_vars: vars/output_vars

    - name: Import VProfile-stack-ami setup variables
      include_vars: vars/vprofilestack

    - name: Import region vars files
      include_vars: vars/vpc_variables

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{region}}"
      register: vprokey_out

    - name: Save private key into file vpro-key.pem
      copy: 
        content: "{{vprokey_out.key.private_key}}"
        dest: "./vpro-key.pem"
        mode: 0600
      when: vprokey_out.changed == true

    - name: Create security Group for Load Balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port from everywhere to LB
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules: 
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create a security group for Vprofile stack
      ec2_group:
        name: vproStack_sg
        description: Allow port 22 from Bastion host
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELBSG_out.group_id}}"
            
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"
      register: vproStackSG_out
      
    - name: Create a security group for Vprofile stack
      ec2_group:
        name: vproStack_sg
        description: Allow port 22 from Bastion host
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no # if you not added this line, all previous rule removed by playbook next run
        rules: 
          - proto: all
            group_id: "{{vproStackSG_out.group_id}}"

    - name: Creating NGINX web01 Machine
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "web01"
          Project: Vprofiles
          Owner: DevOps Team 
        group_id: "{{vproStackSG_out.group_id}}" 
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out

    - name: Creating TOMCAT app01 Machine
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "app01"
          Project: Vprofiles
          Owner: DevOps Team 
        group_id: "{{vproStackSG_out.group_id}}" 
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: Creating Memcached mc01 Machine
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mc01"
          Project: Vprofiles
          Owner: DevOps Team 
        group_id: "{{vproStackSG_out.group_id}}" 
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: Creating RABBITMQ rmq01 Machine
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "rmq01"
          Project: Vprofiles
          Owner: DevOps Team 
        group_id: "{{vproStackSG_out.group_id}}" 
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: Creating MySql db01 Machine
      ec2: 
        key_name: vprokey
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags: 
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "db01"
          Project: Vprofiles
          Owner: DevOps Team 
        group_id: "{{vproStackSG_out.group_id}}" 
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id

    - local_action: 
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{region}}"
        state: "{{state}}"
        instance_ids: 
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{vproELBSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"
        listeners: 
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
    - name: Insert/Update Hosts IP & Name in file provision stack 
      blockinfile: 
        path: provision-stack/group_vars/hostip
        block: |
          web01_ip: "{{ web01_out.tagged_instances[0].private_ip}}"
          app01_ip: "{{ app01_out.tagged_instances[0].private_ip}}"
          rmq01_ip: "{{ rmq01_out.tagged_instances[0].private_ip}}"
          mc01_ip: "{{ mc01_out.tagged_instances[0].private_ip}}"
          db01_ip: "{{ db01_out.tagged_instances[0].private_ip}}"
    
    - name: Copy login key to provision_stack directory
      copy:
        src: vpro-key.pem
        dest: provision-stack/vpro-key.pem
        mode: '0400'

    - name: Insert/Update Hosts IP & Name in file provision stack 
      blockinfile: 
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host="{{ web01_out.tagged_instances[0].private_ip}}"
          app01 ansible_host="{{ app01_out.tagged_instances[0].private_ip}}"
          rmq01 ansible_host="{{ rmq01_out.tagged_instances[0].private_ip}}"
          mc01 ansible_host="{{ mc01_out.tagged_instances[0].private_ip}}"
          db01 ansible_host="{{ db01_out.tagged_instances[0].private_ip}}"
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack-inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp
          
          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=vpro-key.pem

          




